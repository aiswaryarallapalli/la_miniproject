{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"},"colab":{"name":"SVM_for_Human Activity Recognition.ipynb","provenance":[]}},"cells":[{"cell_type":"code","metadata":{"id":"WvM1RnfvcsxT","colab_type":"code","colab":{}},"source":["# Get required libraries \n","import numpy as np\n","import pylab as pl\n","import pandas as pd\n","import matplotlib.pyplot as plt \n","import seaborn as sns\n","from sklearn.utils import shuffle\n","from sklearn.svm import SVC\n","from sklearn.metrics import confusion_matrix, classification_report\n","from sklearn.model_selection import cross_val_score, GridSearchCV"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hldadWzeghjI","colab_type":"code","outputId":"02748ff3-5ea9-4e23-e723-309583ca1e41","executionInfo":{"status":"ok","timestamp":1590078470057,"user_tz":300,"elapsed":2125,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8NSCkbRUg6Ue","colab_type":"code","colab":{}},"source":["read_file = pd.read_csv ('/content/drive/My Drive/X_train.txt', header = None)\n","read_file.columns = ['first_column']\n","read_file.to_csv (r'File name.csv', index=None)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DJqVk2Wg6-yJ","colab_type":"code","colab":{}},"source":["file_csv=pd.read_csv('/content/File name.csv')\n","file_df=pd.DataFrame(file_csv)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2x8jagwhlC7r","colab_type":"code","colab":{}},"source":["read_file1 = pd.read_csv ('/content/drive/My Drive/X_test.txt', header = None)\n","read_file1.columns = ['test_column']\n","read_file1.to_csv (r'File test.csv', index=None)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5QaQQjuSlFGj","colab_type":"code","colab":{}},"source":["file_csv1=pd.read_csv('/content/File test.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1PvQqIGOlMHb","colab_type":"code","colab":{}},"source":["file_test=pd.DataFrame(file_csv1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wKTG7vDUlQ-K","colab_type":"code","colab":{}},"source":["read_file2 = pd.read_csv ('/content/drive/My Drive/y_train.txt', header = None)\n","read_file2.columns = ['train_column']\n","read_file2.to_csv (r'File train.csv', index=None)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LZkPqPY3huQb","colab_type":"code","colab":{}},"source":["file_csv2=pd.read_csv('/content/File train.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5KfRziw_h0m1","colab_type":"code","colab":{}},"source":["file_y_train=pd.DataFrame(file_csv2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oGU4D79LlnJ8","colab_type":"code","colab":{}},"source":["read_file3 = pd.read_csv ('/content/drive/My Drive/y_test.txt', header = None)\n","read_file3.columns = ['testing_column']\n","read_file3.to_csv (r'File testing.csv', index=None)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"H9k1PVyel6Ky","colab_type":"code","colab":{}},"source":["file_csv3=pd.read_csv('/content/File testing.csv')\n","file_y_test=pd.DataFrame(file_csv3)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gp3cRFz5nDwM","colab_type":"code","colab":{}},"source":["train_df=pd.DataFrame()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dCRRmgCkmh-4","colab_type":"code","outputId":"09679d2c-0801-4592-d8b0-644f55c877f2","executionInfo":{"status":"ok","timestamp":1590078476369,"user_tz":300,"elapsed":8345,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["file_df.index"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RangeIndex(start=0, stop=7767, step=1)"]},"metadata":{"tags":[]},"execution_count":66}]},{"cell_type":"code","metadata":{"id":"52QZIPNFh31y","colab_type":"code","colab":{}},"source":["train_df=file_df.merge(file_y_train,on=file_df.index)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kBrt3is8nSi0","colab_type":"code","outputId":"f4ac78c9-c243-44b2-dcad-9c0d56449467","executionInfo":{"status":"ok","timestamp":1590078476370,"user_tz":300,"elapsed":8280,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":419}},"source":["train_df"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key_0</th>\n","      <th>first_column</th>\n","      <th>train_column</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0.04357967369149907 -0.005970221250665042 -0.0...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0.03948003676410195 -0.002131275734104765 -0.0...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0.03997778088792914 -0.005152716105292887 -0.0...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>0.03978455750212895 -0.01180877801445845 -0.02...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0.03875813807419126 -0.002288532894711426 -0.0...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7762</th>\n","      <td>7762</td>\n","      <td>0.048048373718244 -0.04244516076361127 -0.0658...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>7763</th>\n","      <td>7763</td>\n","      <td>0.03763860398201113 0.006430370899785931 -0.04...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>7764</th>\n","      <td>7764</td>\n","      <td>0.03745093779779585 -0.002724423628817307 0.02...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>7765</th>\n","      <td>7765</td>\n","      <td>0.04401104529573163 -0.004535780802438438 -0.0...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>7766</th>\n","      <td>7766</td>\n","      <td>0.06895376485330207 0.001810322263344766 -0.08...</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>7767 rows Ã— 3 columns</p>\n","</div>"],"text/plain":["      key_0                                       first_column  train_column\n","0         0  0.04357967369149907 -0.005970221250665042 -0.0...             5\n","1         1  0.03948003676410195 -0.002131275734104765 -0.0...             5\n","2         2  0.03997778088792914 -0.005152716105292887 -0.0...             5\n","3         3  0.03978455750212895 -0.01180877801445845 -0.02...             5\n","4         4  0.03875813807419126 -0.002288532894711426 -0.0...             5\n","...     ...                                                ...           ...\n","7762   7762  0.048048373718244 -0.04244516076361127 -0.0658...             2\n","7763   7763  0.03763860398201113 0.006430370899785931 -0.04...             2\n","7764   7764  0.03745093779779585 -0.002724423628817307 0.02...             2\n","7765   7765  0.04401104529573163 -0.004535780802438438 -0.0...             2\n","7766   7766  0.06895376485330207 0.001810322263344766 -0.08...             2\n","\n","[7767 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":68}]},{"cell_type":"code","metadata":{"id":"YoHxO2PyEVYh","colab_type":"code","colab":{}},"source":["train_df_copy=train_df.copy()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1za-oveEEsfu","colab_type":"code","outputId":"4483158d-2cdd-4a69-bb85-730124b02452","executionInfo":{"status":"ok","timestamp":1590078476371,"user_tz":300,"elapsed":8258,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":419}},"source":["train_df_copy"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>key_0</th>\n","      <th>first_column</th>\n","      <th>train_column</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0.04357967369149907 -0.005970221250665042 -0.0...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0.03948003676410195 -0.002131275734104765 -0.0...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0.03997778088792914 -0.005152716105292887 -0.0...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>0.03978455750212895 -0.01180877801445845 -0.02...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0.03875813807419126 -0.002288532894711426 -0.0...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7762</th>\n","      <td>7762</td>\n","      <td>0.048048373718244 -0.04244516076361127 -0.0658...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>7763</th>\n","      <td>7763</td>\n","      <td>0.03763860398201113 0.006430370899785931 -0.04...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>7764</th>\n","      <td>7764</td>\n","      <td>0.03745093779779585 -0.002724423628817307 0.02...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>7765</th>\n","      <td>7765</td>\n","      <td>0.04401104529573163 -0.004535780802438438 -0.0...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>7766</th>\n","      <td>7766</td>\n","      <td>0.06895376485330207 0.001810322263344766 -0.08...</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>7767 rows Ã— 3 columns</p>\n","</div>"],"text/plain":["      key_0                                       first_column  train_column\n","0         0  0.04357967369149907 -0.005970221250665042 -0.0...             5\n","1         1  0.03948003676410195 -0.002131275734104765 -0.0...             5\n","2         2  0.03997778088792914 -0.005152716105292887 -0.0...             5\n","3         3  0.03978455750212895 -0.01180877801445845 -0.02...             5\n","4         4  0.03875813807419126 -0.002288532894711426 -0.0...             5\n","...     ...                                                ...           ...\n","7762   7762  0.048048373718244 -0.04244516076361127 -0.0658...             2\n","7763   7763  0.03763860398201113 0.006430370899785931 -0.04...             2\n","7764   7764  0.03745093779779585 -0.002724423628817307 0.02...             2\n","7765   7765  0.04401104529573163 -0.004535780802438438 -0.0...             2\n","7766   7766  0.06895376485330207 0.001810322263344766 -0.08...             2\n","\n","[7767 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":70}]},{"cell_type":"code","metadata":{"id":"xpR9OLtOEadL","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hyrKzxEyEzsK","colab_type":"code","outputId":"f5fcc1e9-1a91-45f4-9732-c133074a29be","executionInfo":{"status":"ok","timestamp":1590078476372,"user_tz":300,"elapsed":8246,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len(train_df_copy)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["7767"]},"metadata":{"tags":[]},"execution_count":71}]},{"cell_type":"code","metadata":{"id":"ZBf7cT9XnYHz","colab_type":"code","colab":{}},"source":["train_df=train_df.drop('key_0',axis=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xHGn7ZUrng6U","colab_type":"code","colab":{}},"source":["train_df.columns=['X_train','y_train']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FrtDWcUlnt4u","colab_type":"code","outputId":"bdbdc1b9-c99f-49de-e7f1-c34c582ff325","executionInfo":{"status":"ok","timestamp":1590078476373,"user_tz":300,"elapsed":8227,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["train_df.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>X_train</th>\n","      <th>y_train</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.04357967369149907 -0.005970221250665042 -0.0...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.03948003676410195 -0.002131275734104765 -0.0...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.03997778088792914 -0.005152716105292887 -0.0...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.03978455750212895 -0.01180877801445845 -0.02...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.03875813807419126 -0.002288532894711426 -0.0...</td>\n","      <td>5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                             X_train  y_train\n","0  0.04357967369149907 -0.005970221250665042 -0.0...        5\n","1  0.03948003676410195 -0.002131275734104765 -0.0...        5\n","2  0.03997778088792914 -0.005152716105292887 -0.0...        5\n","3  0.03978455750212895 -0.01180877801445845 -0.02...        5\n","4  0.03875813807419126 -0.002288532894711426 -0.0...        5"]},"metadata":{"tags":[]},"execution_count":74}]},{"cell_type":"code","metadata":{"id":"p0BLdFxinxdG","colab_type":"code","colab":{}},"source":["test_df=pd.DataFrame()\n","test_df=file_test.merge(file_y_test,on=file_test.index)\n","test_df=test_df.drop('key_0',axis=1)\n","test_df.columns=['X_test','y_test']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"c8C15xSHsrMB","colab_type":"code","outputId":"cb24de58-fbaa-4024-8dc9-bff08c22d68d","executionInfo":{"status":"ok","timestamp":1590078476374,"user_tz":300,"elapsed":8211,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["test_df.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>X_test</th>\n","      <th>y_test</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.03091390114285231 -0.008926886096823239 0.04...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.04254815978784499 0.001078593395508642 -0.02...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.03829680119042922 -0.01166027962998328 -0.02...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.03620514156803556 -0.01814825480472393 -0.02...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.03803391746983476 -0.01343697915500253 -0.03...</td>\n","      <td>5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                              X_test  y_test\n","0  0.03091390114285231 -0.008926886096823239 0.04...       5\n","1  0.04254815978784499 0.001078593395508642 -0.02...       5\n","2  0.03829680119042922 -0.01166027962998328 -0.02...       5\n","3  0.03620514156803556 -0.01814825480472393 -0.02...       5\n","4  0.03803391746983476 -0.01343697915500253 -0.03...       5"]},"metadata":{"tags":[]},"execution_count":76}]},{"cell_type":"code","metadata":{"id":"U7O_Iw9Ss5qz","colab_type":"code","colab":{}},"source":["new=[]\n","for i in range(len(test_df)):\n","  l=list(test_df['X_test'][i].split(\" \"))\n","  new_list=[float(i) for i in l]\n","  new.append(new_list)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"E-zCX7cUwG4F","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_VzhgA1avS6M","colab_type":"code","colab":{}},"source":["new_train=[]\n","for i in range(len(train_df)):\n","  l=list(train_df['X_train'][i].split(\" \"))\n","  new_list=[float(i) for i in l]\n","  new_train.append(new_list)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wYL0gtCUwU_P","colab_type":"code","colab":{}},"source":["df = pd.DataFrame({'X_training':new_train})\n","df1 = pd.DataFrame({'X_testing':new})\n","test_df=test_df.merge(df1,on=test_df.index)\n","train_df=train_df.merge(df,on=train_df.index)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rUBaACx5xIQt","colab_type":"code","colab":{}},"source":["train_df=train_df.drop(['key_0','X_train'],axis=1)\n","test_df=test_df.drop(['key_0','X_test'],axis=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Idn7RaIwxgYN","colab_type":"code","colab":{}},"source":["train_df=train_df[train_df['y_train'] < 7] "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0Ed-TVP2xkMK","colab_type":"code","colab":{}},"source":["test_df=test_df[test_df['y_test'] < 7] "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cu7Nm1HFcsxZ","colab_type":"code","colab":{}},"source":["#Load train and test datasets and shuffle the data \n","import time\n","start = time.clock()\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SIRG0hJBnXaQ","colab_type":"code","colab":{}},"source":["train=shuffle(train_df)\n","test=shuffle(test_df)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dRhElhlPx8yQ","colab_type":"code","colab":{}},"source":["train=train.reset_index()\n","test=test.reset_index()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gRR3oCrAygnS","colab_type":"code","colab":{}},"source":["train=train.drop('index',axis=1)\n","test=test.drop('index',axis=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"g3L8RhjryzWe","colab_type":"code","outputId":"63fd1062-a5da-46ab-ca5f-0579aece6c5e","executionInfo":{"status":"ok","timestamp":1590078480184,"user_tz":300,"elapsed":11928,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["test.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>y_test</th>\n","      <th>X_testing</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6</td>\n","      <td>[0.03321108666386685, -0.0004876879780905119, ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>[0.03342560622631075, -0.01542768247898252, -0...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>[0.07200701558398692, 0.02549039635250927, -0....</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>6</td>\n","      <td>[0.04126880882973683, -0.00274126506745942, -0...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>[0.04022733918261112, 0.004450107147029314, -0...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   y_test                                          X_testing\n","0       6  [0.03321108666386685, -0.0004876879780905119, ...\n","1       5  [0.03342560622631075, -0.01542768247898252, -0...\n","2       2  [0.07200701558398692, 0.02549039635250927, -0....\n","3       6  [0.04126880882973683, -0.00274126506745942, -0...\n","4       5  [0.04022733918261112, 0.004450107147029314, -0..."]},"metadata":{"tags":[]},"execution_count":87}]},{"cell_type":"code","metadata":{"id":"3_yFGiCoyLch","colab_type":"code","outputId":"60de2a0c-0d28-4b48-d512-38bb764ea327","executionInfo":{"status":"ok","timestamp":1590078480184,"user_tz":300,"elapsed":11916,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["train.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>y_train</th>\n","      <th>X_training</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>[0.003073107919772111, -0.02593863855934431, -...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>[-0.001558169540978538, -0.02400149895429971, ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5</td>\n","      <td>[0.03908932992769487, -0.0009480457653242569, ...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5</td>\n","      <td>[0.03924933153885202, -0.003863769789526184, -...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>[0.004087514937806347, -0.05106233640066205, -...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   y_train                                         X_training\n","0        2  [0.003073107919772111, -0.02593863855934431, -...\n","1        2  [-0.001558169540978538, -0.02400149895429971, ...\n","2        5  [0.03908932992769487, -0.0009480457653242569, ...\n","3        5  [0.03924933153885202, -0.003863769789526184, -...\n","4        1  [0.004087514937806347, -0.05106233640066205, -..."]},"metadata":{"tags":[]},"execution_count":88}]},{"cell_type":"code","metadata":{"id":"XaFIF-3ZD7vE","colab_type":"code","outputId":"e847f5ad-60f1-4cf4-e7f0-62cb39bf2733","executionInfo":{"status":"ok","timestamp":1590078480185,"user_tz":300,"elapsed":11904,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len(train)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["7415"]},"metadata":{"tags":[]},"execution_count":89}]},{"cell_type":"code","metadata":{"id":"nX6CepVREJI5","colab_type":"code","outputId":"dabce944-23dc-42e1-8139-3674c3c25aba","executionInfo":{"status":"ok","timestamp":1590078480185,"user_tz":300,"elapsed":11896,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["len(test)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2996"]},"metadata":{"tags":[]},"execution_count":90}]},{"cell_type":"code","metadata":{"id":"Hj_ioxfDcsxf","colab_type":"code","colab":{}},"source":["def plot_confusion(classifier, test_pts, test_labels):\n","    cl = ['STANDING',\n","               'SITTING',\n","               'LYING',\n","               'WALKING',\n","               'WALK_DOWN',\n","               'WALK_UP']\n","    \n","    pred_label = classifier.predict(test_pts)\n","\n","    result = confusion_matrix(test_labels, pred_label)\n","\n","    fig = plt.figure()\n","    ax = fig.add_subplot(111)\n","    \n","    cax = ax.matshow(result)\n","\n","    fig.colorbar(cax)\n","    ax.set_xticklabels([''] + cl,rotation = 90)\n","    ax.set_yticklabels([''] + cl)\n","    plt.xlabel(\"Predicted Label\")\n","    plt.ylabel(\"True Label\")\n","    plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jD64JUuvcsxl","colab_type":"code","outputId":"e1eb707a-03c4-4b44-db1b-fe9af3517f3f","executionInfo":{"status":"ok","timestamp":1590078480186,"user_tz":300,"elapsed":11870,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":317}},"source":["# Summary statistics of training and test data to check for missing values\n","print(\"Any missing sample in training set:\",train.isnull().values.any())\n","print(\"Any missing sample in test set:\",test.isnull().values.any(), \"\\n\")\n","\n","#Frequency distribution of classes\"\n","train_outcome = pd.crosstab(index=test[\"y_test\"],  # Make a crosstab\n","                              columns=\"count\")      # Name the count column\n","\n","train_outcome\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Any missing sample in training set: False\n","Any missing sample in test set: False \n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>col_0</th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>y_test</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>496</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>471</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>420</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>508</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>556</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>545</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["col_0   count\n","y_test       \n","1         496\n","2         471\n","3         420\n","4         508\n","5         556\n","6         545"]},"metadata":{"tags":[]},"execution_count":92}]},{"cell_type":"code","metadata":{"id":"AY5vqxV_AKJk","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LTM4yTSecsxs","colab_type":"code","outputId":"cf29ba36-fb99-45e2-88d0-ca913141890e","executionInfo":{"status":"ok","timestamp":1590078480599,"user_tz":300,"elapsed":12269,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":297}},"source":["# Visualizing Outcome Distribution \n","temp = train[\"y_train\"].value_counts()\n","df = pd.DataFrame({'labels': temp.index,\n","                   'values': temp.values\n","                  })\n","\n","\n","\n","labels = df['labels']\n","sizes = df['values']\n","colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral','cyan','lightpink']\n","patches, texts = plt.pie(sizes, colors=colors, shadow=True, startangle=90, pctdistance=1.1, labeldistance=1.2)\n","plt.legend(patches, labels, loc=\"best\")\n","plt.axis('equal')\n","plt.tight_layout()\n","plt.show()\n"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"CY3AaV88csxx","colab_type":"code","outputId":"c094a664-c16d-449e-ead7-24cc412840f0","executionInfo":{"status":"ok","timestamp":1590078482049,"user_tz":300,"elapsed":13704,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["# Seperating Predictors and Outcome values from train and test sets\n","X_train = pd.DataFrame(train.drop(['y_train'],axis=1))\n","X_train=pd.DataFrame(list(X_train['X_training']))\n","Y_train_label = train.y_train.values.astype(object)\n","X_test = pd.DataFrame(test.drop(['y_test'],axis=1))\n","X_test=pd.DataFrame(list(X_test['X_testing']))\n","Y_test_label = test.y_test.values.astype(object)\n","\n","# Dimension of Train and Test set \n","print(\"Dimension of Train set\",X_train.shape)\n","print(\"Dimension of Test set\",X_test.shape,\"\\n\")\n","\n","# Transforming non numerical labels into numerical labels\n","from sklearn import preprocessing\n","encoder = preprocessing.LabelEncoder()\n","\n","# encoding train labels \n","encoder.fit(Y_train_label)\n","Y_train = encoder.transform(Y_train_label)\n","\n","# encoding test labels \n","encoder.fit(Y_test_label)\n","Y_test = encoder.transform(Y_test_label)\n","\n","#Total Number of Continous and Categorical features in the training set\n","num_cols = X_train._get_numeric_data().columns\n","print(\"Number of numeric features:\",num_cols.size)\n","#list(set(X_train.columns) - set(num_cols))'''\n","\n","\n","names_of_predictors = list(X_train.columns.values)\n","\n","# Scaling the Train and Test feature set \n","from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Dimension of Train set (7415, 561)\n","Dimension of Test set (2996, 561) \n","\n","Number of numeric features: 561\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"CYaPVlaD3xdO","colab_type":"code","outputId":"e762db85-563c-46c5-f3c4-85df2949a15d","executionInfo":{"status":"ok","timestamp":1590078482049,"user_tz":300,"elapsed":13692,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["Y_train"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 4, ..., 1, 1, 0])"]},"metadata":{"tags":[]},"execution_count":95}]},{"cell_type":"code","metadata":{"id":"mWSXA1L74Ou0","colab_type":"code","outputId":"cc8d0979-9ece-4ce8-b699-3f813daddf64","executionInfo":{"status":"ok","timestamp":1590078482050,"user_tz":300,"elapsed":13673,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["Y_train_label"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 2, 5, ..., 2, 2, 1], dtype=object)"]},"metadata":{"tags":[]},"execution_count":96}]},{"cell_type":"code","metadata":{"id":"wsAIyCBKcsx3","colab_type":"code","outputId":"b8a5014b-15a5-471a-e448-7b73c467fc9d","executionInfo":{"status":"ok","timestamp":1590078483067,"user_tz":300,"elapsed":14679,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from sklearn.decomposition import PCA\n","\n","pca = PCA(n_components=200)\n","\n","X_train_scaled = pca.fit_transform(X_train_scaled)\n","print(pca.explained_variance_ratio_.sum())\n","X_test_scaled = pca.transform(X_test_scaled)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["0.99353073348657\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HIGm2YR-csx8","colab_type":"code","colab":{}},"source":["\n","# Create the parameter grid \n","params_grid = [{'kernel': ['rbf'], 'gamma': [1e-2, 1e-3, 1e-4],\n","                'C': [1, 10, 100]},\n","               {'kernel': ['linear'], 'C': [1, 10, 100]}]\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mXZIs3kncsx_","colab_type":"code","outputId":"d081e349-8886-4bed-ee05-af891e580144","executionInfo":{"status":"ok","timestamp":1590079142587,"user_tz":300,"elapsed":674184,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":153}},"source":["# Performing CV to tune parameters for best SVM fit \n","svm_model = GridSearchCV(SVC(), params_grid, cv=8)\n","svm_model.fit(X_train_scaled, Y_train)\n","\n","# View the accuracy score\n","print('Best score for training data:', svm_model.best_score_,\"\\n\") \n","\n","# View the best parameters for the model found using grid search\n","print('Best C:',svm_model.best_estimator_.C,\"\\n\") \n","print('Best Kernel:',svm_model.best_estimator_.kernel,\"\\n\")\n","print('Best Gamma:',svm_model.best_estimator_.gamma,\"\\n\")"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Best score for training data: 0.9869185707861818 \n","\n","Best C: 100 \n","\n","Best Kernel: rbf \n","\n","Best Gamma: 0.001 \n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"irFgnqOhcsyD","colab_type":"code","outputId":"4f19a7d7-6e20-4e1d-d29b-c19a93cf6536","executionInfo":{"status":"ok","timestamp":1590079229444,"user_tz":300,"elapsed":9606,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":386}},"source":["final_model = svm_model.best_estimator_\n","Y_pred = final_model.predict(X_test_scaled)\n","Y_pred_label = list(encoder.inverse_transform(Y_pred))\n","\n","# Making the Confusion Matrix\n","\n","\n","plot_confusion(final_model,X_test_scaled , Y_test)\n","\n","print(\"Training set score for SVM: %f\" % final_model.score(X_train_scaled , Y_train))\n","print(\"Testing  set score for SVM: %f\" % final_model.score(X_test_scaled  , Y_test ))\n","end = time.clock()\n","print('Running time: %s Seconds'%(end-start))"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["Training set score for SVM: 0.999865\n","Testing  set score for SVM: 0.954272\n","Running time: 674.8896000000002 Seconds\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RW7-2TudcsyI","colab_type":"code","outputId":"6277cb36-35f3-43c5-88d7-97d86b9f44e1","executionInfo":{"status":"ok","timestamp":1590079232328,"user_tz":300,"elapsed":1293,"user":{"displayName":"Bhargavi G","photoUrl":"","userId":"05524960281141701058"}},"colab":{"base_uri":"https://localhost:8080/","height":238}},"source":["print(classification_report(Y_pred, Y_test, digits=4))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0     0.9798    0.9529    0.9662       510\n","           1     0.9618    0.9283    0.9447       488\n","           2     0.9143    0.9846    0.9481       390\n","           3     0.8996    0.9541    0.9260       479\n","           4     0.9604    0.9175    0.9385       582\n","           5     1.0000    0.9963    0.9982       547\n","\n","    accuracy                         0.9543      2996\n","   macro avg     0.9527    0.9556    0.9536      2996\n","weighted avg     0.9554    0.9543    0.9544      2996\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sCNm5aiII-PR","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jb2u-STjJBi4","colab_type":"code","colab":{}},"source":["data=pd.DataFrame((Y_test_label,Y_pred_label))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CkFQ8bxcJUFo","colab_type":"code","colab":{}},"source":["data=data.T"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"h4lR3GSDCvoh","colab_type":"code","colab":{}},"source":["data.columns=['True','Predicted']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NZn8mOfWC_fK","colab_type":"code","colab":{}},"source":["data.head()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EDiAtxfoDAOh","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}